module game_beta (
    input button,
    
    input clk,  // clock
    input rst,  // reset
    
    output score[16],
    output positionl1[16],
    output positionl2[16],
    output reg_eleven[16],
    output debug_slowclock,
    output statedebug[16],
    output wdsel_output[16],
    output write_addr[4]
   
  ) {
  
  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  sig wdsel[16];
  
  alu game_alu;

  .clk(clk){
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      game_CU game_controlunit;
      game_miniRegfiles players;
      
      counter slow_timer(#SIZE(1),#DIV(26)); 

    }
  }
  always {
    
    //edge detectors
    game_timer_detector.in = slow_timer.value; // 30 second timer detector
    
    //pass button press signal to CU unit
    game_controlunit.button = button;
    
    //Setup REGFILE unit 
    players.we = game_controlunit.we;
    players.write_address = game_controlunit.regfile_write_address;
    players.read_address_a = game_controlunit.regfile_read_address_a;
    players.read_address_b = game_controlunit.regfile_read_address_b;
    
    //bootstrap reg_b output to CU for convenient branching conditions
    game_controlunit.regfiledatab = players.out_b;
    game_controlunit.regfiledataa = players.out_a;
    
    //asel mux
    case(game_controlunit.asel){
      b00  : inputAlu_a = players.out_a;
      b01  : inputAlu_a = 16h0001; 
      default : //b10 unused
          inputAlu_a = 0;
    }
    
    //bsel mux
    case(game_controlunit.bsel){
      b00 : inputAlu_b = players.out_b;
      b01 : inputAlu_b = 16h0001;
      default: //necessary to init
          inputAlu_b = 0;
      
    }
    
    //ALU
    game_alu.x = inputAlu_a;
    game_alu.y = inputAlu_b;
    game_alu.op = game_controlunit.alufn;
   
    
    //wdsel mux
    case (game_controlunit.wdsel){
      b01 : wdsel = 16h0000;
      b11 : wdsel= 16h0001;
      b10 : wdsel = 16h000f;

      default : //b00
          wdsel = game_alu.s;
    }
    wdsel_output = wdsel;
    players.data = wdsel;
    
    score = players.score;
    debug_slowclock = slow_timer.value;
    positionl1 = players.positionl1;
    positionl2 = players.positionl2;
    reg_eleven = game_controlunit.state; // prints reg 11 which contains the information of the game state
    statedebug = game_controlunit.debug; // gets the integer value to show which state we are in
    write_addr = game_controlunit.regfile_write_address; // get the write address value
  }
}
