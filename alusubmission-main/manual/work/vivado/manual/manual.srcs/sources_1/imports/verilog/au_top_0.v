/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_gamestate_d, M_gamestate_q = 1'h0;
  reg [15:0] M_gameposition_d, M_gameposition_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [16-1:0] M_beta_score;
  wire [16-1:0] M_beta_positionl1;
  wire [16-1:0] M_beta_positionl2;
  wire [16-1:0] M_beta_reg_eleven;
  wire [1-1:0] M_beta_debug_slowclock;
  wire [16-1:0] M_beta_statedebug;
  wire [16-1:0] M_beta_wdsel_output;
  wire [4-1:0] M_beta_write_addr;
  reg [1-1:0] M_beta_button;
  game_beta_3 beta (
    .clk(clk),
    .rst(rst),
    .button(M_beta_button),
    .score(M_beta_score),
    .positionl1(M_beta_positionl1),
    .positionl2(M_beta_positionl2),
    .reg_eleven(M_beta_reg_eleven),
    .debug_slowclock(M_beta_debug_slowclock),
    .statedebug(M_beta_statedebug),
    .wdsel_output(M_beta_wdsel_output),
    .write_addr(M_beta_write_addr)
  );
  wire [1-1:0] M_buttondetect_out;
  reg [1-1:0] M_buttondetect_in;
  edge_detector_4 buttondetect (
    .clk(clk),
    .in(M_buttondetect_in),
    .out(M_buttondetect_out)
  );
  wire [1-1:0] M_btn_cond_out;
  reg [1-1:0] M_btn_cond_in;
  button_conditioner_5 btn_cond (
    .clk(clk),
    .in(M_btn_cond_in),
    .out(M_btn_cond_out)
  );
  
  always @* begin
    M_gameposition_d = M_gameposition_q;
    M_gamestate_d = M_gamestate_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    M_btn_cond_in = io_button[0+0-:1];
    M_buttondetect_in = M_btn_cond_out;
    M_beta_button = M_buttondetect_out;
    M_gameposition_d = M_beta_positionl1;
    M_gamestate_d = M_beta_reg_eleven;
    io_led[0+0+7-:8] = M_gameposition_q[0+7-:8];
    io_led[8+0+7-:8] = M_gameposition_q[8+7-:8];
    M_seg_values = {M_gamestate_q[12+3-:4], M_gamestate_q[8+3-:4], M_gamestate_q[4+3-:4], M_gamestate_q[0+3-:4]};
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_gamestate_q <= 1'h0;
      M_gameposition_q <= 1'h0;
    end else begin
      M_gamestate_q <= M_gamestate_d;
      M_gameposition_q <= M_gameposition_d;
    end
  end
  
endmodule
