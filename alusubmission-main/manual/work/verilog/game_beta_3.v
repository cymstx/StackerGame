/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_beta_3 (
    input button,
    input clk,
    input rst,
    output reg [15:0] score,
    output reg [15:0] positionl1,
    output reg [15:0] positionl2,
    output reg [15:0] reg_eleven,
    output reg debug_slowclock,
    output reg [15:0] statedebug,
    output reg [15:0] wdsel_output,
    output reg [3:0] write_addr
  );
  
  
  
  reg [15:0] inputAlu_a;
  
  reg [15:0] inputAlu_b;
  
  reg [15:0] wdsel;
  
  wire [16-1:0] M_game_alu_s;
  wire [3-1:0] M_game_alu_zvn;
  reg [16-1:0] M_game_alu_x;
  reg [16-1:0] M_game_alu_y;
  reg [6-1:0] M_game_alu_op;
  alu_9 game_alu (
    .x(M_game_alu_x),
    .y(M_game_alu_y),
    .op(M_game_alu_op),
    .s(M_game_alu_s),
    .zvn(M_game_alu_zvn)
  );
  
  wire [1-1:0] M_game_timer_detector_out;
  reg [1-1:0] M_game_timer_detector_in;
  edge_detector_4 game_timer_detector (
    .clk(clk),
    .in(M_game_timer_detector_in),
    .out(M_game_timer_detector_out)
  );
  wire [6-1:0] M_game_controlunit_alufn;
  wire [3-1:0] M_game_controlunit_asel;
  wire [3-1:0] M_game_controlunit_bsel;
  wire [2-1:0] M_game_controlunit_wdsel;
  wire [1-1:0] M_game_controlunit_we;
  wire [4-1:0] M_game_controlunit_regfile_write_address;
  wire [4-1:0] M_game_controlunit_regfile_read_address_a;
  wire [4-1:0] M_game_controlunit_regfile_read_address_b;
  wire [16-1:0] M_game_controlunit_state;
  wire [16-1:0] M_game_controlunit_debug;
  reg [16-1:0] M_game_controlunit_regfiledatab;
  reg [16-1:0] M_game_controlunit_regfiledataa;
  reg [1-1:0] M_game_controlunit_button;
  game_CU_10 game_controlunit (
    .clk(clk),
    .rst(rst),
    .regfiledatab(M_game_controlunit_regfiledatab),
    .regfiledataa(M_game_controlunit_regfiledataa),
    .button(M_game_controlunit_button),
    .alufn(M_game_controlunit_alufn),
    .asel(M_game_controlunit_asel),
    .bsel(M_game_controlunit_bsel),
    .wdsel(M_game_controlunit_wdsel),
    .we(M_game_controlunit_we),
    .regfile_write_address(M_game_controlunit_regfile_write_address),
    .regfile_read_address_a(M_game_controlunit_regfile_read_address_a),
    .regfile_read_address_b(M_game_controlunit_regfile_read_address_b),
    .state(M_game_controlunit_state),
    .debug(M_game_controlunit_debug)
  );
  wire [16-1:0] M_players_out_a;
  wire [16-1:0] M_players_out_b;
  wire [16-1:0] M_players_score;
  wire [16-1:0] M_players_positionl1;
  wire [16-1:0] M_players_positionl2;
  reg [4-1:0] M_players_write_address;
  reg [1-1:0] M_players_we;
  reg [16-1:0] M_players_data;
  reg [4-1:0] M_players_read_address_a;
  reg [4-1:0] M_players_read_address_b;
  game_miniRegfiles_11 players (
    .clk(clk),
    .rst(rst),
    .write_address(M_players_write_address),
    .we(M_players_we),
    .data(M_players_data),
    .read_address_a(M_players_read_address_a),
    .read_address_b(M_players_read_address_b),
    .out_a(M_players_out_a),
    .out_b(M_players_out_b),
    .score(M_players_score),
    .positionl1(M_players_positionl1),
    .positionl2(M_players_positionl2)
  );
  wire [1-1:0] M_slow_timer_value;
  counter_12 slow_timer (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_value)
  );
  
  always @* begin
    M_game_timer_detector_in = M_slow_timer_value;
    M_game_controlunit_button = button;
    M_players_we = M_game_controlunit_we;
    M_players_write_address = M_game_controlunit_regfile_write_address;
    M_players_read_address_a = M_game_controlunit_regfile_read_address_a;
    M_players_read_address_b = M_game_controlunit_regfile_read_address_b;
    M_game_controlunit_regfiledatab = M_players_out_b;
    M_game_controlunit_regfiledataa = M_players_out_a;
    
    case (M_game_controlunit_asel)
      2'h0: begin
        inputAlu_a = M_players_out_a;
      end
      2'h1: begin
        inputAlu_a = 16'h0001;
      end
      default: begin
        inputAlu_a = 1'h0;
      end
    endcase
    
    case (M_game_controlunit_bsel)
      2'h0: begin
        inputAlu_b = M_players_out_b;
      end
      2'h1: begin
        inputAlu_b = 16'h0001;
      end
      default: begin
        inputAlu_b = 1'h0;
      end
    endcase
    M_game_alu_x = inputAlu_a;
    M_game_alu_y = inputAlu_b;
    M_game_alu_op = M_game_controlunit_alufn;
    
    case (M_game_controlunit_wdsel)
      2'h1: begin
        wdsel = 16'h0000;
      end
      2'h3: begin
        wdsel = 16'h0001;
      end
      2'h2: begin
        wdsel = 16'h000f;
      end
      default: begin
        wdsel = M_game_alu_s;
      end
    endcase
    wdsel_output = wdsel;
    M_players_data = wdsel;
    score = M_players_score;
    debug_slowclock = M_slow_timer_value;
    positionl1 = M_players_positionl1;
    positionl2 = M_players_positionl2;
    reg_eleven = M_game_controlunit_state;
    statedebug = M_game_controlunit_debug;
    write_addr = M_game_controlunit_regfile_write_address;
  end
endmodule
